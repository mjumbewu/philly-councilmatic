import os

# Make filepaths relative to settings.
def rel_path(*subs):
    """Make filepaths relative to this settings file"""
    root_path = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(root_path, *subs)

DEBUG = True
COMPRESS_ENABLED = True
TEMPLATE_DEBUG = DEBUG
DO_DEBUG_TOOLBAR = True

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'councilmatic',                      # Or path to database file if using sqlite3.
        'USER': 'postgres',                      # Not used with sqlite3.
        'PASSWORD': 'postgres',                  # Not used with sqlite3.
        'HOST': 'localhost',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '5432',                      # Set to empty string for default. Not used with sqlite3.
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    }
}

###############################################################################
#
# 3rd-party service configuration and keys
#

TWITTER_CONSUMER_KEY         = ''
TWITTER_CONSUMER_SECRET      = ''
FACEBOOK_APP_ID              = ''
FACEBOOK_API_SECRET          = ''
LINKEDIN_CONSUMER_KEY        = ''
LINKEDIN_CONSUMER_SECRET     = ''
GOOGLE_CONSUMER_KEY          = ''
GOOGLE_CONSUMER_SECRET       = ''

RECAPTCHA_PUBLIC_KEY  = ''
RECAPTCHA_PRIVATE_KEY = ''

GOOGLE_ANALYTICS_ACCOUNT = ''
FOOTER_CONTENT = "An app by <a href='http://codeforamerica.org'>Code for America</a>."

###############################################################################
#
# Source Data
#

# If your city is using an older version of Legistar from back in the days
# before Granicus bought Daystar, then your legislation settings should look
# something like this:
#
# LEGISLATION = {
#     'SYSTEM': 'Daystar Insite',
#     'ROOT': 'http://legislation.phila.gov/',
#     'STARTING_KEY': 72,
#     'ADDRESS_BOUNDS': [39.874439,-75.29892, 40.141615,-74.940491], # lat, lng, lat, lng
#     'ADDRESS_SUFFIX': ', Philadelphia, PA',
#
#     'SCRAPER': ('phillyleg.management.scraper_wrappers.sources.'
#                 'insite_scraper.PhillyLegistarSiteWrapper'),
#     'SCRAPER_OPTIONS': {
#         'root_url': 'http://legislation.phila.gov/',
#     },
# }

# If your city is using a hosted version of legistar (e.g., your city's
# Legistar hostname is something like <city>.legistar.com), your legislation
# settings should look something like:
#
# LEGISLATION = {
#     'SYSTEM': 'Granicus Legistar',
#     'ROOT': 'http://phila.legistar.com/',
#     'ADDRESS_BOUNDS': [39.874439,-75.29892, 40.141615,-74.940491], # lat, lng, lat, lng
#     'ADDRESS_SUFFIX': ', Philadelphia, PA',
#
#     'SCRAPER': ('phillyleg.management.scraper_wrappers.sources.'
#                 'hosted_legistar_scraper.HostedLegistarSiteWrapper'),
#     'SCRAPER_OPTIONS': {
#         'hostname': 'http://phila.legistar.com/',
#         'fulltext': True,        # Load and store full text from PDFs?
#         'sponsor_links': False,  # Are sponsor names in anchors/links?
#
#         # Label overrides
#         # ---------------
#         'id_label': 'File #',
#         'controlling_body_label': 'In control',
#         'intro_date_label': 'File Created',
#         'topics_label': 'Indexes',
#     },
# }

###############################################################################
#
# Caching
#
# Using some cache backend is definitely recommended. If you want to use
# memcache, uncomment the lines below and fill in your server information. See
# https://docs.djangoproject.com/en/dev/topics/cache/#setting-up-the-cache for
# other options.
#

#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#        'LOCATION': '127.0.0.1:11211',
#    }
#}

###############################################################################
#
# Topic classifier
#
# Use this to set custom rules for classifying your legislation

TOPIC_CLASSIFIER = lambda title: []

###############################################################################
#
# Site search configuration
#

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': rel_path('whoosh_index'),
    }
}

################################################################################
#
# Testing and administration
#
# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },

    'filters': {
        'only_when_debug_is_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },

    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'django.utils.log.NullHandler',
        },
        'console':{
            'level':'INFO',
            'class':'logging.StreamHandler',
            'formatter':'verbose',
        },
        'logfile':{
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename':rel_path('logs/councilmatic.log'),
            'formatter':'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'filters': ['only_when_debug_is_false'],
        }
    },

    'loggers': {
        'django': {
            'handlers':['null'],
            'propagate': True,
            'level':'INFO',
        },
        'django.request': {
            'handlers': ['logfile', 'mail_admins'],
            'level': 'WARNING',
            'propagate': False,
        },
        'councilmatic': {
            'handlers': ['console', 'logfile', 'mail_admins'],
            'level': 'DEBUG',
        },
        'phillyleg.management': {
            'handlers': ['console', 'logfile', 'mail_admins'],
            'level': 'DEBUG',
        },
    }
}
